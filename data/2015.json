[{"question_id": "Fall_2015_1", "topic": "Strongly Connected Components", "question_description": "For the directed graph below, list the strongly connected components in the order in which they are output by the strongly connected components algorithm.", "answer": "{F, G}, {J}, {B, C, D, E, H}, {A}", "hint": "Use the strongly connected components algorithm to identify the components in the graph.", "subproblem": [{"problem_order": "1", "description": "Identify the strongly connected components in the graph."}]}, {"question_id": "Fall_2015_2", "topic": "Strongly Connected Components", "question_description": "Draw the state of the union-find data structure (union operations using rank, but without path compression) at the end of the 7th iteration of Kruskal's algorithm on the graph shown below.", "answer": "There's a couple of solutions, depending on tie-breaking in deciding the parent during the union process. Here's one: () G", "hint": "Follow the steps of Kruskal's algorithm and keep track of the state of the union-find data structure.", "subproblem": [{"problem_order": "1", "description": "Perform the first 7 iterations of Kruskal's algorithm on the given graph."}]}, {"question_id": "Fall_2015_3", "topic": "Graphs and DFS", "question_description": "In the lecture, we've learnt an approximation algorithm for traveling salesman problem based on computing MST and a depth first traversal. Suppose we run this approximation algorithm for Traveling Salesman Problem on the following graph. The algorithm will return different tours based on the choices it makes during its depth-first traversal stage.", "answer": "The algorithm will return different tours based on the choices it makes during its depth-first traversal stage.", "hint": "The algorithm for the Traveling Salesman Problem involves computing the minimum spanning tree and performing a depth-first traversal. Consider the different tours that can be generated based on the choices made during the traversal.", "subproblem": [{"problem_order": "1", "description": "Compute the minimum spanning tree of the given graph."}, {"problem_order": "2", "description": "Perform a depth-first traversal on the minimum spanning tree."}, {"problem_order": "3", "description": "Consider the different tours that can be generated based on the choices made during the traversal."}]}, {"question_id": "Fall_2015_4", "topic": "Graphs and DFS", "question_description": "Consider the following graph on 7 vertices.", "answer": "The order in which the quantities reach their final correct values is {Dist(6), Dist(3), Dist(5), Dist(7)}.", "hint": "Apply Dijkstra's algorithm and Floyd-Warshall algorithm to compute the shortest paths in the graph.", "subproblem": [{"problem_order": "1", "description": "Execute Dijkstra's algorithm to compute distances from the vertex 1."}, {"problem_order": "2", "description": "Execute the Floyd-Warshall algorithm to compute pairwise distances."}, {"problem_order": "3", "description": "Determine the order in which the quantities reach their final correct values."}]}, {"question_id": "Fall_2015_5", "topic": "Divide-and-Conquer", "question_description": "The following algebraic identities can be used to design a divide-and-conquer algorithm for multiplying n-bit numbers.", "answer": "The recurrence relation for running time T(n) of the algorithm is T(n) = 6T(n/3) + O(n). The running time of the algorithm is T(n) = O(n^log3(6)).", "hint": "Consider the algebraic identities provided and derive the recurrence relation and running time of the algorithm.", "subproblem": [{"problem_order": "1", "description": "Write the recurrence relation for running time T(n) of the algorithm."}, {"problem_order": "2", "description": "Determine the running time of the algorithm."}]}, {"question_id": "Fall_2015_6", "topic": "Reductions, Bipartite Matching", "question_description": "Assume A and B are search problems, and A reduces to B in polynomial time. In each part you will be given a fact about one of the problems. Determine what, if anything, this allows you to determine about the other problem. Answer each part in one sentence.", "answer": "In part (a), nothing can be determined about A or B. In part (b), it can be determined that A is in P if B is in P. In part (c), it can be determined that B is NP-complete if A is NP-hard. In part (d), nothing can be determined about A or B.", "hint": "Consider the definitions of NP, NP-hard, and NP-complete to determine the relationships between A and B.", "subproblem": [{"problem_order": "1", "description": "Determine what, if anything, can be determined about A or B based on the given fact."}]}, {"question_id": "Fall_2015_7", "topic": "Reductions, Bipartite Matching", "question_description": "After years of research, Horizon Wireless released an encryption algorithm E that encrypts an n-bit message in time O(n^k). Show that if P = NP then this encryption algorithm can be broken in polynomial time. More precisely, argue that if P = NP, then the following decryption problem can be solved in polynomial time.", "answer": "If P = NP, then the decryption problem can be solved in polynomial time because the encryption algorithm can be verified in polynomial time.", "hint": "Consider the definition of P and NP to determine the implications of P = NP on the decryption problem.", "subproblem": [{"problem_order": "1", "description": "Explain the implications of P = NP on the decryption problem."}]}, {"question_id": "Fall_2015_8", "topic": "Zero-Sum Games", "question_description": "Alice and Bob are playing a zero-sum game whose payoff matrix is shown below. The ij entry of the matrix shows the payoff that Alice receives if she plays strategy i and Bob plays strategy j. Alice is the row player and is trying to maximize her payoff.", "answer": "The optimal solution is for Alice to play strategy A with a value of 4.", "hint": "Analyze the payoff matrix to determine the optimal strategy for Alice.", "subproblem": [{"problem_order": "1", "description": "Analyze the payoff matrix to determine the optimal strategy for Alice."}]}, {"question_id": "Fall_2015_9", "topic": "NP-Completeness", "question_description": "Which of the following are NP-search problems? Justify your answers.", "answer": "In part (a), the problem is in P and a polynomial-time algorithm exists. In part (b), the problem is NP-hard. ", "hint": "Consider the definitions of NP and NP-hard to determine if the problems are NP-search problems.", "subproblem": [{"problem_order": "1", "description": "Determine if the given problem is an NP-search problem."}]}, {"question_id": "Fall_2015_10", "topic": "Graphs and DFS", "question_description": "The diameter d of an undirected graph G = (V,E) with unit lengths, is defined to be the maximum distance between any two vertices, i.e. d = max d(u,v), where d(u,v) is the length of the shortest path between u and v.", "answer": "The algorithm has a time complexity of O(|V| + |E|) and provides a 2-approximation for computing the diameter.", "hint": "Design an algorithm that provides a 2-approximation for computing the diameter of the graph.", "subproblem": [{"problem_order": "1", "description": "Design an algorithm that provides a 2-approximation for computing the diameter of the graph."}]}, {"question_id": "Fall_2015_11", "topic": "Graphs and DFS", "question_description": "Horizon Wireless is building a 5G network. The company has a set V of wireless towers; the distance d(i,j) between any two of them is known, and each tower is capable of transmitting to other towers within a distance r. To make this network fault-tolerant, Horizon wants to assign each tower v in V to two other backup towers, so that if v is about to fail, it can transmit its data to them. Due to storage constraints, each tower can only serve as a backup for up to three other towers.", "answer": "The algorithm reduces the problem to max flow and determines if there is a flow with value at least 2|A|, where A is the set of active towers.", "hint": "Reduce the problem to max flow and determine if there is a flow with a certain value.", "subproblem": [{"problem_order": "1", "description": "Reduce the problem to max flow and determine if there is a flow with a certain value."}]}, {"question_id": "Fall_2015_12", "topic": "NP-Completeness", "question_description": "Prove that the following problems are NP-hard.", "answer": "In part (a), DIRECTED RUDRATA CYCLE reduces to RUDRATA CYCLE. In part (b), CALIFORNIAN CYCLE reduces to DIRECTED RUDRATA CYCLE. In part (c), 4-SAT reduces to 3-SAT.", "hint": "Use reduction to prove that the given problems are NP-hard.", "subproblem": [{"problem_order": "1", "description": "Use reduction to prove that the given problem is NP-hard."}]}, {"question_id": "Fall_2015_13", "topic": "NP-Completeness", "question_description": "The 3-SET COVER problem is a special case of the MINIMUM SET COVER PROBLEM where every element appears in at most 3 sets. The formal definition of the problem is as follows.", "answer": "In part (a), we reduce VERTEX COVER to 3-SET COVER. In part (b), we model the problem using a linear program. In part (c), LPOpt cannot be greater than Opt. In part (d), LPOpt can be less than OPT. In part (e), the algorithm yields a 3-approximation for the problem.", "hint": "Use reduction and linear programming to analyze the 3-SET COVER problem.", "subproblem": [{"problem_order": "1", "description": "Use reduction to prove that 3-SET COVER is NP-hard."}, {"problem_order": "2", "description": "Model the 3-SET COVER problem using a linear program."}, {"problem_order": "3", "description": "Justify that LPOpt cannot be greater than Opt."}, {"problem_order": "4", "description": "Justify that LPOpt can be less than OPT."}, {"problem_order": "5", "description": "Prove that the algorithm yields a 3-approximation for the problem."}]}]